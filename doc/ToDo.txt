1) Implement affectors [DONE]

2) Implement controllers/events

3) Once public interface is done, comment with doxygen

4) Optimise

	Get working with Threaded Building Blocks

	Check assembler output, look into SSE/2, look into compiler optimisations.

	Stack-register machine: abstract out all codegen/processing to a base VM class

	A FireTypeControl is needed for every FireType which has any kind of behaviour.  This could eat up memory.

	Cut down the number of arguments to interpretCode

	Avoid float-int conversions where possible
	
	FireTypeBase::getPropertyIndex is bad, find a way round it (used in FireTypeBase set/get properties)
	
need to calculate memory usage if we're not going to allow custom allocators
	
need a way to release guns from memory pool, like firetypecontrols
	
What to do when user wants to manually control bullets from code?  Ie, when you fire a weapon,
the bullets stop their current behaviour and get sucked towards/blown away from you, and then
maybe resume their old behaviour when you stop firing.  This is an edge case but it must be considered.
	Guns should be able to relinquish control of their FireTypes, by calling "yield()" or similar.  When
	this is the case, all FireTypes do not have any special updating done (we have a pointer to the Gun
	in the FireTypeControl for checking).
