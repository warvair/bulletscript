extended to 3d: should be a compile #define, will mean lots of #ifdef code but worth it.

suspend/resume for states: suspend takes up to 8(?) values, and resume must pass all these values to resume
the state.  This way we can have combinational events.  However, this only works for controllers.  We would
need emitters to take events as well.  Emitters shouldn't take events, however, because any logic like this
should be done by controllers.

Controllers can change emitter member variables (including x/y/angle) smoothly, like properties.  If a smooth
transition is interrupted by an immediate one, then the smooth transition is stopped.  First off this means
that using the current method, we can only have a certain number of member variables.  Look into more flexible
way of doing this, which can work for emitted objects as well.

If individual emitters have extra objects, for instance some visual, which are not controlled by the Controller, 
then we will need a callback when a member variable is changed.  Do not implement this for now: it will slow
things down, and it is ultimately a hack because you are controlling a sibling system in the hierarchy.

Without having member variables in affector arguments, we can't have an 'anchor' affector.  In fact, attached
weapons like this are difficult: if the Emitter is destroyed, we need to destroy its emitted objects, but the
current system is not set up for that.  This is important because there will be other uses for anchored objects.

What about other built-in member variables?  This_Z for instance.

Controller and Emitter definitions should inherit from a base class: cuts down on code.  There's currently a lot
of duplication in parsing.

1) Implement affectors [DONE]

2) Implement controllers/events

3) Once public interface is done, comment with doxygen

4) Optimise

	Get working with Threaded Building Blocks

	Check assembler output, look into SSE/2, look into compiler optimisations, intrinsic functions.

	Stack-register machine: abstract out all codegen/processing to a base VM class

	A FireTypeControl is needed for every FireType which has any kind of behaviour.  This could eat up memory.

	Cut down the number of arguments to interpretCode

	Avoid float-int conversions where possible - converting float to int is especially slow.
	
	Try to avoid strings at runtime (eg, passing a literal to a const ref invokes constructor)
	
	FireTypeBase::getPropertyIndex is bad, find a way round it (used in FireTypeBase set/get properties)
	
need to calculate memory usage if we're not going to allow custom allocators
	
need a way to release guns from memory pool, like firetypecontrols
	
What to do when user wants to manually control bullets from code?  Ie, when you fire a weapon,
the bullets stop their current behaviour and get sucked towards/blown away from you, and then
maybe resume their old behaviour when you stop firing.  This is an edge case but it must be considered.
	Guns should be able to relinquish control of their FireTypes, by calling "yield()" or similar.  When
	this is the case, all FireTypes do not have any special updating done (we have a pointer to the Gun
	in the FireTypeControl for checking).
